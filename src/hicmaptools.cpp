#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cstdlib>
#include <algorithm>
#include <ctime> // for random generator

#include <stdio.h>
#include <string.h>

#include "binmap.h"
#include "index.h"
#include "query.h"
#include "interval.h"
#include "bat.h"
#include "region.h"
#include "couple.h"
#include "par.h"
#include "ginter.h" // for parsing ginteraction format

// straw .hic
#include "straw.h"
#include <map>

using namespace std;

void parse_command_line(int argc, char **argv, PARAMETER &par);
void show_param(PARAMETER par);

////////////////////////////////////
// parse function
////////////////////////////////////
char* getCmdOption(char ** begin, char ** end, const std::string & option)
{
    char ** itr = std::find(begin, end, option);
    if (itr != end && ++itr != end)
    {
        return *itr;
    }
    return 0;
}

bool cmdOptionExists(char** begin, char** end, const std::string& option)
{
    return std::find(begin, end, option) != end;
}

void exit_with_help()
{
	printf("hicmaptools -in_map in.binmap -in_bin in.bins QUERY_MODE query.bed -output out_file.tsv\n"
			"or\n"
			"hicmaptools -in_hic in.hic [-in_hic_norm NONE] [-in_hic_resol 10000] QUERY_MODE query.bed -output out_file.tsv\n"
			"or\n"
			"hicmaptools -in_gin in.gin QUERY_MODE query.bed -output out_file.tsv\n"			
			"\n"
			"input:\n"  
			"\t-in_map        text .n_contact or binary .binmap by genBinMap commend \n"
			"\t-in_bin        the bin file for contact map, .bins\n"
			"\tor\n"
			"\t-in_hic        .hic file generated by Juicer\n"
			"\t-in_hic_norm   optional, a normalization method (NONE|VC|VC_SQRT|KR, default: NONE)\n"
			"\t-in_hic_resol  optional, a resolution used to bin .hic (default: 10000)\n"
			"\tor\n"
			"\t-in_gin        .gin file in ginteractions format\n"	
			"\n"
			"QUERY_MODE:\n"
			"\t-bait           calculate average contacts from downstream to upstream of interested position\n"
			"\n"
			"\t-local         list all contacts inside an interval\n"
			"\n"
			"\t-loop          contact intensity between two ends of a loop\n"
			"\n"    
			"\t-pair          contacts between a pair region\n"
			"\n"    
			"\t-sites         contacts between sites\n"
			"\n"
			"\t-submap        sub contact map of interested regions\n"
			"\n"
			"\t-TAD           sum and average of contacts inside TAD region\n"
			"\n"
			"other parameters:\n"
			"\t-ner_bin       check neighbouring bins for bait mode, (default: 10)\n"
			"\t-random        the size of the shuffle sample, you can turn off shuffle test by 0 (default: 100)\n"
			);
	exit(0);
}

int main(int argc, char *argv[])
{
	
	string matrix = "observed";
	string unit = "BP";
	
// parse data
	PARAMETER par;
	
	parse_command_line(argc, argv, par);
	show_param(par);

//	for random
	srand((unsigned)time(NULL)); 

	cout << endl << "[BEGIN]" << endl;
	
	BINMAP map_;
	INDEX index;
	
	if( strlen(par.in_hic) != 0 ){
		map <string, chromosome> chromosomeMap = getAllChr(par.in_hic);
		vector<contactRecord> records;
		for(map <string, chromosome>::iterator it = chromosomeMap.begin(); it != chromosomeMap.end(); it++){

#ifdef DEBUG
			cout << it->second.index << "\t" << it->first << endl;
#endif

			// for handle unusual fly genome chromosome: ie. UN_CP007071V1
			if((it->first == "ALL")||(std::string(it->first).find("UN") == 0)||(std::string(it->first).find("X_") == 0)||(std::string(it->first).find("Y_") == 0))
				continue;
				
			vector<contactRecord> temp = straw(matrix, par.in_hic_norm, par.in_hic, it->first, it->first, unit, par.in_hic_resol);
			sortContactRecord(temp);
			map_.insert_from_hic(temp, par.in_hic_resol, index.get_cbin_number());
			index.insert_from_hic(temp, par.in_hic_resol, it->first);
		}
	}
	else if( strlen(par.in_binmap_name) != 0 ){
		map_ = BINMAP(par.in_binmap_name);
		index = INDEX(par.in_bins_name);
	}
// parse ginteraction	
	else if( strlen(par.in_ginter_name) != 0 ){
		map_ = BINMAP();
		index = INDEX();
		parse_ginteraction(par.in_ginter_name, map_, index);
	}
	else{
		exit_with_help();
	}
		
////////////////////////////////
// handle query mode
////////////////////////////////	
	if(par.query_mode == "none")
	{
		map_.out_contIne(10000, index, par.output_name);
	}
	else if(par.query_mode == "loop"){
		QUERY query(par.query_name, map_, index, par.random_size, par.output_name);
		query.output(par.output_name);
	}
	else if (par.query_mode == "TAD"){
		INTERVAL interval(par.query_name, map_, index);
		interval.gen_internal_contact(map_, index, par.random_size, par.output_name);
		interval.output(par.output_name, 1, (par.random_size > 0));
	}
	else if (par.query_mode == "local"){
		INTERVAL interval(par.query_name, map_, index);
		
		cout << " generating internal contact " << endl;
		interval.gen_internal_contact(map_, index, par.random_size, par.output_name);
		interval.output_internal(par.output_name);		
	}	
	else if (par.query_mode == "bait"){
        BAT bat(par.query_name, index, par.ner_bin, par.ner_bin);
        
        bat.cal_contact(map_, index, par.ner_bin, par.ner_bin, par.random_size, par.output_name);
        bat.output(par.output_name);
	}
	else if (par.query_mode == "sites"){
		BAT bat(par.query_name, index, par.ner_bin, par.ner_bin);
		
		bat.output_pair(par.output_name, map_, index, par.random_size, par.output_name);    
	}	
	else if (par.query_mode == "submap"){
		REGION region(par.query_name, index);		
		region.output(par.output_name, map_);	
	}
	else if (par.query_mode == "pair"){
		COUPLE couple(par.query_name, index);	
		couple.cal_contact(map_, index, par.random_size, par.output_name);
		couple.output(par.output_name);	
	}
		
	cout << endl << "[END]" << endl;
	return 0;
}

void parse_command_line(int argc, char **argv, PARAMETER &par)
{
	int i;
	
	if (argc == 1 || cmdOptionExists(argv, argv+argc, "-h")){
	 exit_with_help();
	}
	
	// parse options
	for(i=1;i<argc;i++)
	{
		if(argv[i][0] != '-') break;
		if(++i>=argc)
			exit_with_help();
		
		if( strncmp(argv[i-1],"-in_map", 20)==0 ){
			strcpy(par.in_binmap_name, argv[i]);
		}
		else if( strncmp(argv[i-1],"-in_bin", 20)==0 ){
			strcpy(par.in_bins_name, argv[i]);
		}
// query mode
		else if( strncmp(argv[i-1],"-bait", 20)==0 ){
			par.query_mode = "bait";
			strcpy(par.query_name, argv[i]);
		}
		else if( strncmp(argv[i-1],"-TAD", 20)==0 ){
			par.query_mode = "TAD";
			strcpy(par.query_name, argv[i]);
		}
		else if( strncmp(argv[i-1],"-local", 20)==0 ){
			par.query_mode = "local";
			strcpy(par.query_name, argv[i]);
		}		
		else if( strncmp(argv[i-1],"-pair", 20)==0 ){
			par.query_mode = "pair";
			strcpy(par.query_name, argv[i]);
		}				
		else if( strncmp(argv[i-1],"-submap", 20)==0 ){
			par.query_mode = "submap";
			strcpy(par.query_name, argv[i]);
		}
		else if( strncmp(argv[i-1],"-loop", 20)==0 ){
			par.query_mode = "loop";
			strcpy(par.query_name, argv[i]);
		}
		else if( strncmp(argv[i-1],"-sites", 20)==0 ){
			par.query_mode = "sites";
			strcpy(par.query_name, argv[i]);
		}		
// other parameters		
// check neighbouring bins for bat mode
		else if( strncmp(argv[i-1],"-ner_bin", 20)==0 ){
			par.ner_bin = atoi(argv[i]);
		}						
// random size
		else if( strncmp(argv[i-1],"-random", 20)==0 ){
			par.random_size = atoi(argv[i]);
		}								
// output								
		else if( strncmp(argv[i-1],"-output", 20)==0 ){
			strcpy(par.output_name, argv[i]);
		}
// hic format
		else if( strncmp(argv[i-1],"-in_hic", 20)== 0){
			strcpy(par.in_hic, argv[i]);
		}
		else if( strncmp(argv[i-1],"-in_hic_norm", 20)== 0){
			strcpy(par.in_hic_norm, argv[i]);
		}
		else if( strncmp(argv[i-1],"-in_hic_resol", 20)== 0){
			par.in_hic_resol = stoi(argv[i]);
		}
// ginteraction format		
		else if( strncmp(argv[i-1],"-in_gin", 20)== 0){
			strcpy(par.in_ginter_name, argv[i]);
		}		
		else{
			fprintf(stderr,"unknown option:%s\n",argv[i-1]);
			exit_with_help();	
		}
	}
	
	// initial .hic normalization as default NONE
	if (strlen(par.in_hic_norm) == 0) 
		strcpy(par.in_hic_norm, "NONE");
	
	// determine filenames
	if(i != argc)
		exit_with_help();
}

void show_param(PARAMETER par)
{
	// show bin and map input
	if ( strlen(par.in_binmap_name) != 0 ){
		cout << "Input" << endl
			<< "\t map   =\t" << par.in_binmap_name << endl
			<< "\t bin   =\t" << par.in_bins_name << endl
			<< "\t query =\t" << par.query_name << endl;
	}
	else if( strlen(par.in_hic) != 0 ){ // show hic input		
		cout << "Input" << endl
			<< "\t hic           =\t" << par.in_hic << endl
			<< "\t normalization =\t" << par.in_hic_norm << endl
			<< "\t resolution    =\t" << par.in_hic_resol << endl
			<< "\t query         =\t" << par.query_name << endl;
	}
	else if( strlen(par.in_ginter_name) != 0 ){ // show ginteraction input
		cout << "Input" << endl
			<< "\t ginteractions =\t" << par.in_ginter_name << endl
			<< "\t query         =\t" << par.query_name << endl;		
	}
	else{
		exit_with_help();
	}
	
	cout << "Parameters" << endl
		<< "\t ner_bin     =\t"  << par.ner_bin << endl
		<< "\t random size =\t"  << par.random_size << endl;

	cout << "Output" << endl
		<< "\t output =\t" << par.output_name << endl;  
}
